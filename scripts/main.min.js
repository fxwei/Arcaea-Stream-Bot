/* global BrotliDecompress Highcharts */
(function () {
	function _(e, t, i) {
		var a = null;
		if ("text" === e)
			return document.createTextNode(t);
		a = document.createElement(e);
		for (var n in t)
			if ("style" === n)
				for (var o in t.style)
					a.style[o] = t.style[o];
			else if ("className" === n)
				a.className = t[n];
			else if ("event" === n)
				for (var o in t.event)
					a.addEventListener(o, t.event[o]); 
			else if ("props" === n)
				for (var o in t.props) a[o] = t.props[o];
			else a.setAttribute(n, t[n]);
		if (i)
			if ("string" == typeof i)
				a.innerHTML = i;
			else if (Array.isArray(i))
				for (var l = 0; l < i.length; l++)
					null != i[l] && a.appendChild(i[l]);
		return a;
	}
	function $(a) {
		return document.querySelector(a);
	}
	HTMLElement.prototype.replaceWith = function (n) {
		this.parentNode.insertBefore(n, this);
		this.remove();
		return n;
	};
	var difficultyNames = ['Past', 'Present', 'Future', 'Beyond'];
	var lang = 'en';
	if (/ja/i.test(navigator.language))
		lang = document.body.className = 'ja';
	if (/zh/i.test(navigator.language))
		lang = document.body.className = 'zh';
	var translationData = {
		'Arcaea score prober': {
			zh: 'Arcaea查分器'
		},
		'User Code (9 digits)': {
			zh: '好友码（9位）',
			ja: 'フレンドコード'
		},
		"Submit": {
			zh: '查询'
		},
		'PTT explained: ': {
			zh: 'PTT机制：'
		},
		'Invalid code': {
			zh: '无效id'
		},
		'Connecting': {
			zh: '连接中'
		},
		'Connect failed': {
			zh: '连接失败'
		},
		'Request sent': {
			zh: '查询开始'
		},
		'You request was queued, please wait...': {
			zh: '线路繁忙……'
		},
		'Queried, waiting for results...': {
			zh: '获取数据……'
		},
		'Completed': {
			zh: '完成'
		},
		'Error: ': {
			zh: '错误：'
		},
		'finding player': {
			zh: '查找玩家出错'
		},
		'retrieving data': {
			zh: '获取分数出错'
		},
		'account is locked': {
			zh: "查询用账号被封"
		},
		'account cannot login': {
			zh: "查询用账号无法登录"
		},
		'invalid user code': {
			zh: "好友码无效"
		},
		'Please update arcaea': {
			zh: "请通知维护者更新 Arcaea"
		},
		'Lowiro server timeout': {
			zh: "616 服务器超时"
		},
		'User info': {
			zh: '玩家信息',
			ja: 'プレイヤー情報'
		},
		'Registered at: ': {
			zh: '注册于：',
			ja: '登録：'
		},
		'Chart constant': {
			zh: '谱面定数',
			ja: '譜面定数'
		},
		'Result rating': {
			zh: '成绩评价',
			ja: 'スコア評価'
		},
		'Cleared at': {
			zh: '取得日期',
			ja: 'クリア日期'
		},
		'Date added': {
			zh: '歌曲更新日期',
			ja: '曲追加日期'
		},
		'Best 30 average: ': {
			zh: 'Best 30 均值：',
			ja: 'Best 30 平均：'
		},
		'Recent top 10 average: ': {
			zh: 'Recent 前10 均值：',
			ja: 'Recent トップ10 平均：'
		},
		'Max PTT without new best: ': {
			zh: '不更新最高分时可达到的最高 ptt：',
			ja: 'ベスト更新不要でポテンシャル最大可能值：'
		},
		'Sort by: ': {
			zh: '排序：',
			ja: '表示順：'
		},
		'Export CSV': {
			zh: '导出CSV'
		},
		'Song': {
			zh: '曲目',
			ja: '曲名'
		},
		'Artist': {
			zh: '曲师',
			ja: 'コンポーザー'
		},
		'Difficulty': {
			zh: '难度',
			ja: '難易度'
		},
		'Constant': {
			zh: '定数',
			ja: '定数'
		},
		'Score': {
			zh: '分数',
			ja: 'スコア'
		},
		'Rating': {
			zh: 'ptt',
			ja: 'ポテンシャル'
		},
		'Nothing (only return user info and recent)': {
			zh: '空集（仅返回用户信息和最近游玩成绩）',
			ja: 'なし（プレイヤー情報と最近プレイの検索のみ）'
		},
		'Recent plays:': {
			zh: '最近游玩：',
			ja: '最近プレイ'
		},
		'Toolbox': {
			zh: '工具箱'
		},
		'Player name lookup (name/rank before 2019/03/14)': {
			zh: '玩家查找（2019/03/14前的玩家名/排名）',
			ja: 'プレイヤー名検索（2019/03/14より前の名前/ランク）'
		},
		'Rating calculator': {
			zh: '葡萄糖计算器',
			ja: 'ポテンシャル計算機'
		},
		'Fetch constants for manual calculate': {
			zh: '获取定数表',
			ja: 'ポテンシャル表取得'
		},
		'Score: ': {
			zh: '分数：',
			ja: 'スコア：'
		},
		'Selected chart: ': {
			zh: '已选谱面：',
			ja: '選んだ譜面：'
		},
		'Rating: ': {
			zh: 'ptt：',
			ja: 'ポテンシャル：'
		},
		'Fetched constants': {
			zh: '定数表',
			ja: 'ポテンシャル表'
		},
		'Found %num% player(s)': {
			zh: '匹配到%num%个玩家',
			ja: '%num% 件記録'
		},
		"_FAIR_USE_": {
			en: "Fair usage: Please use this page as you needed. Though we can't do anything if you abuse it, we still recommend and hope you use it fairly. ",
			zh: '合理使用：请按需使用这个工具。虽然滥用了我也不能怎么样，但还是建议并希望合理地使用'
		},
		'_DATA_COLLECTION_1_': {
			en: 'Data collection 1: As you use this service, you agree that we will record your basic user info into our database, and use it to provide name lookup service. ',
			zh: '数据收集 1：在使用此服务时，您即同意我们记录并更新您的基本用户信息，并以此提供用户名查找服务。'
		},
		'_DATA_COLLECTION_2_': {
			en: 'Data collection 2: As you use this service, you agree that we will determine chart constants with your most recent score. For debugging purpose, the score used to determine chart constants will be recorded, but the user that the score comes from will not be recorded. ',
			zh: '数据收集 2：在使用此服务时，您即同意我们根据您最近一次游玩的成绩推算谱面定数，为了方便调试，用于推算谱面定数的成绩也会一并记录，但不会记录此成绩所对应的用户。'
		},
		'Record date: ': {
			zh: '记录时间：',
			ja: '記録時間：'
		},
		'Select lookup history': {
			zh: '选择历史查询',
			ja: '検索履歴'
		},
		'Score-Rating chart': {
			zh: '分数-评分图'
		},
		'Show score rating chart': {
			zh: '显示分数-评分图'
		},
		'Probe range: ': {
			zh: '查分范围：',
			ja: 'スコア取得範囲：'
		},
		'Can select up to 4 levels': {
			zh: '最多可以选择4个难度',
			ja: '４レベルまで選択できる'
		},
		'Potential is hidden': {
			zh: 'ptt已被隐藏',
			ja: 'ポテンシャルは表示しない'
		},
		'_FUN_FACT_1_': {
			en: 'Fun fact: After the 3.6.0 security update, with co-operation with developers of other probers, we spend 3 full days to reverse the new API protocol. After that, the 3.6.1 update is out and reserving is even harder, but luckily the protocol remains unchanged. However, the real cheater bypassed all the new security check just after the update by just simulating touch input. In the following 3.6.4 update, the API protocol changed again. Although it becomes much harder, we still reversed the newer API protocol in nearly one week.',
			zh: '趣事：在 3.6.0 安全性更新后，我们与其它查分工具的开发者合作，耗费了三整天的时间，逆向分析出了新版 API 协议的细节。在此之后 Arcaea 更新了 3.6.1 ，使得逆向分析变得更加困难，不过幸运的是 API 协议并未再次变化。然而，真正的作弊者在新版本发布第一天就通过模拟触屏输入绕过了所有的安全检查。而这之后的 3.6.4 更新中，API 协议发生了变化。尽管逆向分析的难度大大提升了，但是我们还是耗费将近一周的时间，逆向分析出了更新版本 API 协议的细节。'
		},
		'_FUN_FACT_2_': {
			en: 'Dear Lowiro: Don\'t think you win this time! The real cheater still can upload valid score without play the song by hand, but the prober and the writer of the wikis get significantly impacted. A security update like this is probably not what the players want. If you really want to prevent cheater from the Highscores, we suggest to upload game replay from the client to be manually checked, instead of doing those useless works.',
			zh: '亲爱的 616：不要以为这样就赢了啊！真正的作弊者仍然不手动打歌就能上传合法成绩，但查分器和维基编者却受到了重大的影响。这样的安全更新可能并不是玩家想要的更新。如果真的希望更有效打击排行榜作弊，建议让游戏客户端上传游玩回放方便人工查证，而不是做这些无用功。'
		},
		'_FUN_FACT_3_': {
			en: 'A multi-process related bug of older version of this prober was exploited by Lowiro to detect and ban accounts used by this Prober, so we rewrote the prober in nodejs instead of php to fix that. The performance of this prober should be better now.',
			zh: '由于旧版查分器的一个多进程相关的 Bug 被 616 用来识别并封禁查分器所使用的账号，我们抛弃了原有的 php 架构，转而使用 nodejs 重写了查分器。查分器的性能现在应当有所改善。'
		}
	};
	var errors = {
		add: 'finding player',
		fetch: 'retrieving data',
		potential_hidden: 'Potential is hidden'
	};
	var check = function (i) { return (i < 10 ? '0' : '') + i; };
	var timeagoInstance = {
		format: function (date) {
			date = new Date(date);
			var ts = date.getTime(), now = Date.now();
			if (date.getFullYear() == (new Date).getFullYear()) {
				if (date.getMonth() == (new Date).getMonth()) {
					if (date.getDate() == (new Date).getDate()) {
						return check(date.getHours()) + ':' + check(date.getMinutes());
					}
					var day = Math.floor((now - ts) / 24 / 3600e3);
					return day + ' day' + (day == 1 ? '' : 's') + ' ago';
				}
				return check(date.getMonth() + 1) + '/' + check(date.getDate());
			}
			return (date.getFullYear() + '').substr(2) + '/' + check(date.getMonth() + 1) + '/' + check(date.getDate());
		}
	};
	function timeagoRun() {
		var needs = [].slice.call(document.getElementsByClassName('timeago'));
		needs.forEach(function (i) {
			if (i.hasAttribute('datetime'))
				i.textContent = timeagoInstance.format(parseInt(i.getAttribute('datetime')));
		});
	}
	setInterval(timeagoRun, 6e4);

	document.addEventListener('touchstart', function () { });

	function _t(s, l) {
		return (translationData[s] != undefined && translationData[s][l] != undefined) ? translationData[s][l] : s;
	}
	function transDOM(ele, l) {
		document.title = _t(document.title, l);
		if (ele.childNodes.length == 1 && ele.childNodes[0].nodeName.toLowerCase() == '#text') {
			if (ele.hasAttribute('orig-content')) {
				ele.textContent = _t(ele.getAttribute('orig-content'), l);
			} else {
				var trans = _t(ele.textContent, l);
				if (trans != ele.textContent) {
					ele.setAttribute('orig-content', ele.textContent);
					ele.textContent = _t(ele.textContent, l);
				}
			}
		} else {
			for (var i = 0; i < ele.children.length; i++) {
				transDOM(ele.children[i], l);
			}
		}
	}
	transDOM(document.body, lang);

	var userCodeInput = $('#user-code'), submitBtn = $('#submit'), statusMsg = $('#status-message'), currentProbeRange;
	userCodeInput.focus();
	userCodeInput.addEventListener('input', function () {
		if (!/^\d{,9}$/.test(this.value)) this.value = this.value.replace(/[^\d]/g, '').substr(0, 9);
		statusMsg.textContent = '';
	});
	userCodeInput.addEventListener('keydown', function (e) {
		if (e.keyCode == 13) this.blur(), submitBtn.click();
	});
	submitBtn.addEventListener('click', function () {
		if (running) return;
		var code = userCodeInput.value.replace(/[^\d]/g, '').substr(0, 9);
		if (code.length != 9) return statusMsg.textContent = _t('Invalid code', lang);
		var cmd = [code];
		cmd.push(-1);
		cmd.push(-1);
		connectSocket();
		ws.onopen = function (e) {
			ws.send(cmd.join(' '));
			statusMsg.textContent = _t('Request sent', lang);
		};
		if (code != scoresCode) {
			scores = [];
			scoresObj = {};
			window.scores = scoresObj;
			scoresCode = code;
		}
	});
	function connectSocket() {
		running = true;
		statusMsg.textContent = _t('Connecting', lang);
		ws = new WebSocket('wss://arc.estertion.win:616');
		ws.binaryType = 'arraybuffer';
		ws.onerror = function (e) {
			statusMsg.textContent = _t('Connect failed', lang);
			running = false;
		};
		ws.onmessage = function (e) {
			var data = e.data;
			if (data.byteLength) {
				data = BrotliDecompress(new Uint8Array(data));
				data = String.fromCharCode.apply(String, data);
				data = JSON.parse(decodeURIComponent(escape(data)));
				if (window.DEBUG) console.log('msg', e.data.byteLength, data);
				switch (data.cmd) {
					case 'songtitle': {
						songTitleData = data.data;
						break;
					}
					case 'songartist': {
						songArtistData = data.data;
						break;
					}
					case 'userinfo': {
						userInfo = data.data;
						window.userInfo = userInfo;

						var userInfoDiv = $('#user-info').replaceWith(_('div', { id: 'user-info' }));
						if (data.data.recent_score.length) {
							userInfoDiv.appendChild(_('div', {}, data.data.recent_score.map(generateScoreTable)));
						}
						timeagoRun();
						break;
					}
					case 'scores': {
						data.data.forEach(function (i) { scoresObj[i.song_id + i.difficulty] = i; });
						scores = Object.values(scoresObj);
						scores.sort(function (b, a) { return a.rating > b.rating ? 1 : -1; });
						var rank = 1;
						scores.forEach(function (i) { i.rank = rank++; });
						var sum30 = scores.slice(0, 30).map(function (s) { return s.rating }).reduce(function (a, b) { return a + b }, 0);
						var sum10 = scores.slice(0, 10).map(function (s) { return s.rating }).reduce(function (a, b) { return a + b }, 0);
						best30Sum = sum30;
						best10Sum = sum10;
						sortAndGenerate();
						statusMsg.textContent = _t('Queried, waiting for results...', lang) + scores.length;
						timeagoRun();
						break;
					}
					case 'lookup_result': {
						var resultDiv = $('#lookup-result');
						resultDiv.textContent = '';
						resultDiv.appendChild(_('div', {}, [_('text', _t('Found %num% player(s)', lang).replace('%num%', data.data.length))]));
						resultDiv.appendChild(_('div', {}, data.data.map(function (i) {
							return _('div', { style: { marginTop: '10px' } }, [
								_('div', { className: 'name' }, [
									_('text', i.name),
									_('span', { className: 'rank' }, [_('text', 'UID: ' + i.id)]),
									_('br'),
									_('text', 'Code: ' + i.code)
								]),
								_('div', { className: 'join-date' }, [
									_('text', _t('Registered at: ', lang)),
									_('span', { className: 'hoveritem' }, [
										_('span', { className: 'normal timeago', datetime: i.join_date }, [_('text', getDateString(i.join_date))]),
										_('span', { className: 'hover' }, [_('text', getDateString(i.join_date))])
									])
								]),
								_('div', { className: 'ptt' }, [_('text', 'PTT: ' + (i.rating / 100).toFixed(2))]),
								_('div', { className: 'data-date' }, [_('text', _t('Record date: ', lang) + i.data_time)]),
							]);
						})));
						timeagoRun();
						break;
					}
					case 'constants': {
						Object.keys(data.data).forEach(function (i) {
							constants.push({
								id: i,
								search: (i + ',' + getSongTitle(i) + ',' + getSongArtist(i)).toLowerCase(),
								data: data.data[i],
								dom: _('tr', {}, [
									_('td', {}, [_('text', getSongTitle(i) + (getSongArtist(i) === "" ? "" : " \n " + getSongArtist(i)))]),
									_('td', {
										className: data.data[i][0] == undefined ? '' : data.data[i][0].old ? 'old-constant' : ''
									}, data.data[i][0] == undefined ? [] : [_('label', {}, [
										_('input', { type: 'radio', name: 'selection', value: i + ',0,' + data.data[i][0].constant }),
										_('text', data.data[i][0].constant.toFixed(1))
									])]),
									_('td', {
										className: data.data[i][1] == undefined ? '' : data.data[i][1].old ? 'old-constant' : ''
									}, data.data[i][1] == undefined ? [] : [_('label', {}, [
										_('input', { type: 'radio', name: 'selection', value: i + ',1,' + data.data[i][1].constant }),
										_('text', data.data[i][1].constant.toFixed(1))
									])]),
									_('td', {
										className: data.data[i][2] == undefined ? '' : data.data[i][2].old ? 'old-constant' : ''
									}, data.data[i][2] == undefined ? [] : [_('label', {}, [
										_('input', { type: 'radio', name: 'selection', value: i + ',2,' + data.data[i][2].constant }),
										_('text', data.data[i][2].constant.toFixed(1))
									])]),
									_('td', {
										className: data.data[i][3] == undefined ? '' : data.data[i][3].old ? 'old-constant' : ''
									}, data.data[i][3] == undefined ? [] : [_('label', {}, [
										_('input', { type: 'radio', name: 'selection', value: i + ',3,' + data.data[i][3].constant }),
										_('text', data.data[i][3].constant.toFixed(1))
									])])
								])
							});
						});
						constants.sort(function (a, b) { if (!a.data[manualTableSortKey]) { return 1 }; if (!b.data[manualTableSortKey]) { return -1 }; return (b.data[manualTableSortKey].constant - a.data[manualTableSortKey].constant) * (manualTableSortDesc ? 1 : -1); });
						renderConstTable();
						break;
					}
					default: {
						console.log(data);
					}
				}
			} else {
				if (window.DEBUG) console.log('msg', data);
				if (data === 'invalid id') {
					statusMsg.textContent = _t('Invalid code', lang);
					running = false;
					ws.close();
				} else if (data === 'queued') {
					statusMsg.textContent = _t('You request was queued, please wait...', lang);
				} else if (data === 'queried') {
					statusMsg.textContent = _t('Queried, waiting for results...', lang);
				}/* else if (data === 'bye') {
		  }*/ else if (data.substr(0, 5) === 'error') {
					var reason = data.substr(6);
					statusMsg.textContent = _t('Error: ', lang) + _t(errors[reason] || reason, lang);
					running = false;
				} else if (data.substr(0, 11) === 'queueLength') {
					var number = data.substr(12);
					statusMsg.textContent = _t('You request was queued, please wait...', lang) + number;
					running = false;
				}
			}
			//console.log('msg', data);
		};
		ws.onclose = function (e) {
			if (running) {
				statusMsg.textContent = _t('Completed', lang);
				running = false;
				setTimeout(function () { statusMsg.textContent = ''; }, 5000);
			}
		};
	}

	var running = false, ws, songTitleData = {}, songArtistData = {}, userInfo, scores, scoresObj, scoresCode = "";

	function round(n) {
		return Math.round(n * 1e5) / 1e5;
	}
	function getDateString(date) {
		date = new Date(date * 1);
		return [date.getFullYear(), check(date.getMonth() + 1), check(date.getDate())].join('/') + ' ' + [check(date.getHours()), check(date.getMinutes()), check(date.getSeconds())].join(':');
	}
	function sortAndGenerate() {
		scores.sort(function (b, a) {
			var sortBy = sort;
			if (!a[sortBy]) sortBy = 'rating';
			return a[sortBy] > b[sortBy] ? 1 : -1;
		});
		generateScoreTables($('#scores'));
	}
	function generateScoreTables(old) {
		var replacement = _('div', { id: 'scores', 'data-sort': sort, 'data-range': currentProbeRange }, scores.map(generateScoreTable));
		if (currentProbeRange == 'default')
			replacement.insertBefore(_('span', { className: 'score-item' }, [
				_('text', _t('Best 30 average: ', lang) + round(best30Sum / 30)),
				_('br'),
				_('text', _t('Recent top 10 average: ', lang) + (userInfo.rating > 0 ? round((userInfo.rating / 100 * 40 - best30Sum) / 10) : 'Huh?')),
				_('br'),
				_('text', _t('Max PTT without new best: ', lang) + round((best30Sum / 10 + best10Sum / 10) / 4))
			]), replacement.firstChild);
		old.replaceWith(replacement);
	}
	var clearTypeMap = ['fail', 'normal', 'full', 'pure', 'easy', 'hard'];
	function generateScoreTable(i) {
		return _('div', { className: 'score-item' }, [
			_('div', {}, [
				_('span', { className: 'song-title' }, [_('text', getSongTitle(i.song_id))])
			]),
			_('div', {style:{"line-height":"0.6", "padding-bottom":"10px"}}, [
				_('span', { className: 'song-artist' }, [_('text', (getSongArtist(i.song_id) === "" ? "" : (getSongArtist(i.song_id))))])
			]),
			_('div', { className: 'song-detail' }, [
				clearDetailDOM(i)
			]),
			_('div', { className: 'difficulty chart-' + i.difficulty }, [_('text', difficultyNames[i.difficulty]+" "+i.constant)]),
				i.rank ? _('span', { className: 'rank' }, [_('text', '#' + i.rank)]) : _('text', ''),
			_('div', { className: 'song-score' }, [_('text', formatScore(i.score))]),
			_('span', { className: 'song-clear-type', style: { marginLeft: '25px' }}, [
				_('img', {src:"imgs/clear_badge_mini_"+clearTypeMap[i.clear_type]+".png",height:"45px"},[])
			]),

		]);
	}
	
	function formatScore(score) {
		score = score + '';
		while (score.length < 8) score = '0' + score;
		return [score.substr(0, 2), score.substr(2, 3), score.substr(5, 3)].join("'");
	}
	function clearDetailDOM(detail) {
		return _('table', {style:{"max-width":"200px", "float":"right"}}, [_('tbody', {}, [
			_('tr', {}, [_('td', {style:{"color":"deepskyblue"},className:"label"}, [_('text', 'PURE ')]), _('td', {style: { "font-family": "ArcaeaScoreP"},className:"number"}, [_('text', detail.perfect_count)]), _('td', {style: { "font-family": "ArcaeaShine", "padding-left":"10px","font-size":"26px"}}, [_('text', ' +' + detail.shiny_perfect_count)])]),
			_('tr', {}, [_('td', {className:"label"}, [_('text', 'FAR ')]), _('td', {style: { "font-family": "ArcaeaScoreFL"},className:"number"}, [_('text', detail.near_count)]), _('td')]),
			_('tr', {}, [_('td', {className:"label"}, [_('text', 'LOST ')]), _('td', {style: { "font-family": "ArcaeaScoreFL"},className:"number"}, [_('text', detail.miss_count)]), _('td')]),
		])]);
	}

	function getSongTitle(id) {
		var song = songTitleData[id];
		if (!song) return id;
		if (lang === 'jp' && song.jp) return song.jp;
		return song.en;
	}
	function getSongArtist(id) {
		var song = songArtistData[id];
		if (!song) return "";
		return song;
	}
})();